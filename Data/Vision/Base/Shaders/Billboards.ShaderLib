FILEVERSION = 2.4.0.0;
PLATFORM = DX9;

RENDER_STATE RSC_0 {
  blendingFromSurface = true;
  rasterizerstylefromsurface = true;

  //------ Blend State Group ------
  alphatestref = 100;
  alphatestfunc = less_or_equal;

  //------ Depth Stencil Group ------

  //------ Rasterizer State Group ------

  //------ Tesselation State Group ------
}

RENDER_STATE RSC_1 {
  blendingFromSurface = true;
  rasterizerstylefromsurface = true;

  //------ Blend State Group ------
  alphatestref = 100;
  alphatestfunc = less_or_equal;

  //------ Depth Stencil Group ------

  //------ Rasterizer State Group ------

  //------ Tesselation State Group ------
}

RENDER_STATE RSC_2 {
  blendingFromSurface = true;
  rasterizerstylefromsurface = true;
  trackingmask = 1536;

  //------ Blend State Group ------
  alphatestref = 100;
  alphatestfunc = less_or_equal;

  //------ Depth Stencil Group ------
  depthwriteenabled = false;

  //------ Rasterizer State Group ------

  //------ Tesselation State Group ------
}

RENDER_STATE RSC_3 {
  blendingFromSurface = true;
  rasterizerstylefromsurface = true;
  trackingmask = 768;

  //------ Blend State Group ------
  alphatestref = 100;
  alphatestfunc = less_or_equal;

  //------ Depth Stencil Group ------

  //------ Rasterizer State Group ------
  cullmode = none;

  //------ Tesselation State Group ------
}

RENDER_STATE RSC_4 {
  blendingFromSurface = true;
  rasterizerstylefromsurface = true;
  trackingmask = 768;

  //------ Blend State Group ------
  alphatestref = 100;
  alphatestfunc = less_or_equal;

  //------ Depth Stencil Group ------

  //------ Rasterizer State Group ------
  cullmode = none;

  //------ Tesselation State Group ------
}

RENDER_STATE RSC_5 {

  //------ Blend State Group ------
  blendenable = 255;
  alphatestref = 64;
  srcblend = src_alpha;

  //------ Depth Stencil Group ------
  depthtestenabled = false;
  depthwriteenabled = false;

  //------ Rasterizer State Group ------
  cullmode = none;

  //------ Tesselation State Group ------
}

SHADER Billboards {
  RenderStateContainerID = 0;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 53;
  RecompilationRequiredOnPlatforms = 0;
  supportedplatforms = 743;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 1;
  SAMPLER_PS 0 = {
    samplername = "";
    texturetype = base_texture;
    textureindex = 0;
    texturefile = "";
    filtermode = default;
    textureaddressmode = wrap,wrap,wrap;
    m_fLodBias = 0.000000;
    m_iMaxAnisotropy = 1;
    comparisonfunc = less;
    bordercolor = 0.000000,0.000000,0.000000,1.000000;
    minlod = 0.000000;
    maxlod = 0.000000;
  }
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
//
#define BILLBOARD_ALWAYS_UP
#define USE_FOG
#define USE_CLIPDISTANCES
#include "Billboards.inc"
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_2_0;
  vs_mintargetDX11 = vs_4_0_level_9_1;
  svs_mintarget = vs_2_0;
  svs_mintargetDX11 = vs_4_0_level_9_1;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
//
#define BILLBOARD_ALWAYS_UP
#define USE_FOG
#include "Billboards.inc"
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_2_0;
  ps_mintargetDX11 = ps_4_0_level_9_1;

  //------ compute shader source ------
  cs_mintarget = cs_4_0;

  //------ platform specific bytecode ------
}

SHADER Billboards_AT {
  RenderStateContainerID = 1;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 53;
  RecompilationRequiredOnPlatforms = 0;
  supportedplatforms = 743;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 1;
  SAMPLER_PS 0 = {
    samplername = "";
    texturetype = base_texture;
    textureindex = 0;
    texturefile = "";
    filtermode = default;
    textureaddressmode = wrap,wrap,wrap;
    m_fLodBias = 0.000000;
    m_iMaxAnisotropy = 1;
    comparisonfunc = less;
    bordercolor = 0.000000,0.000000,0.000000,1.000000;
    minlod = 0.000000;
    maxlod = 0.000000;
  }
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
//
#define BILLBOARD_ALWAYS_UP
#define USE_FOG
#define ALPHATEST
#define USE_CLIPDISTANCES
#include "Billboards.inc"
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_2_0;
  vs_mintargetDX11 = vs_4_0_level_9_1;
  svs_mintarget = vs_2_0;
  svs_mintargetDX11 = vs_4_0_level_9_1;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
//
#define BILLBOARD_ALWAYS_UP
#define USE_FOG
#define ALPHATEST
#include "Billboards.inc"
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_2_0;
  ps_mintargetDX11 = ps_4_0_level_9_1;

  //------ compute shader source ------
  cs_mintarget = cs_4_0;

  //------ platform specific bytecode ------
}

SHADER Billboards_NoZ {
  RenderStateContainerID = 2;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 53;
  RecompilationRequiredOnPlatforms = 0;
  supportedplatforms = 743;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 1;
  SAMPLER_PS 0 = {
    samplername = "";
    texturetype = base_texture;
    textureindex = 0;
    texturefile = "";
    filtermode = default;
    textureaddressmode = wrap,wrap,wrap;
    m_fLodBias = 0.000000;
    m_iMaxAnisotropy = 1;
    comparisonfunc = less;
    bordercolor = 0.000000,0.000000,0.000000,1.000000;
    minlod = 0.000000;
    maxlod = 0.000000;
  }
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
//
#define BILLBOARD_ALWAYS_UP
//#define USE_FOG
//#define ALPHATEST
#define USE_CLIPDISTANCES
#include "Billboards.inc"
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_2_0;
  vs_mintargetDX11 = vs_4_0_level_9_1;
  svs_mintarget = vs_2_0;
  svs_mintargetDX11 = vs_4_0_level_9_1;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
//
#define BILLBOARD_ALWAYS_UP
//#define USE_FOG
//#define ALPHATEST
#include "Billboards.inc"
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_2_0;
  ps_mintargetDX11 = ps_4_0_level_9_1;

  //------ compute shader source ------
  cs_mintarget = cs_4_0;

  //------ platform specific bytecode ------
}

SHADER Billboards_Crosses {
  RenderStateContainerID = 3;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 21;
  RecompilationRequiredOnPlatforms = 0;
  supportedplatforms = 743;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 1;
  SAMPLER_PS 0 = {
    samplername = "";
    texturetype = base_texture;
    textureindex = 0;
    texturefile = "";
    filtermode = default;
    textureaddressmode = wrap,wrap,wrap;
    m_fLodBias = 0.000000;
    m_iMaxAnisotropy = 1;
    comparisonfunc = less;
    bordercolor = 0.000000,0.000000,0.000000,1.000000;
    minlod = 0.000000;
    maxlod = 0.000000;
  }
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
//
#define BILLBOARDS_AS_CROSSES
#define USE_FOG
#define USE_CLIPDISTANCES
#include "Billboards.inc"
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_2_0;
  vs_mintargetDX11 = vs_4_0_level_9_1;
  svs_mintarget = vs_2_0;
  svs_mintargetDX11 = vs_4_0_level_9_1;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
//
#define BILLBOARDS_AS_CROSSES
#define USE_FOG
#include "Billboards.inc"
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_2_0;
  ps_mintargetDX11 = ps_4_0_level_9_1;

  //------ compute shader source ------
  cs_mintarget = cs_4_0;

  //------ platform specific bytecode ------
}

SHADER Billboards_Crosses_AT {
  RenderStateContainerID = 4;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 21;
  RecompilationRequiredOnPlatforms = 0;
  supportedplatforms = 743;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 1;
  SAMPLER_PS 0 = {
    samplername = "";
    texturetype = base_texture;
    textureindex = 0;
    texturefile = "";
    filtermode = default;
    textureaddressmode = wrap,wrap,wrap;
    m_fLodBias = 0.000000;
    m_iMaxAnisotropy = 1;
    comparisonfunc = less;
    bordercolor = 0.000000,0.000000,0.000000,1.000000;
    minlod = 0.000000;
    maxlod = 0.000000;
  }
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
//
#define BILLBOARDS_AS_CROSSES
#define USE_FOG
#define ALPHATEST
#define USE_CLIPDISTANCES
#include "Billboards.inc"
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_2_0;
  vs_mintargetDX11 = vs_4_0_level_9_1;
  svs_mintarget = vs_2_0;
  svs_mintargetDX11 = vs_4_0_level_9_1;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
//
#define BILLBOARDS_AS_CROSSES
#define USE_FOG
#define ALPHATEST
#include "Billboards.inc"
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_2_0;
  ps_mintargetDX11 = ps_4_0_level_9_1;

  //------ compute shader source ------
  cs_mintarget = cs_4_0;

  //------ platform specific bytecode ------
}

SHADER Corona {
  RenderStateContainerID = 5;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 1;
  RecompilationRequiredOnPlatforms = -744;
  supportedplatforms = 743;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 0;
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
//
#include <Shaders/VisionCommon.inc>
#include <Shaders/ShaderHelpers.inc>

#ifdef _VISION_DX11

cbuffer g_GlobalConstantBufferFrame : register (b0)
{
  float4x4  matP            : packoffset(c0);   // projection matrix
  float4x4  matEye          : packoffset(c4);   // eye matrix
  float4x4  matInvEye       : packoffset(c8);   // inverse eye matrix
  float4    contextCP       : packoffset(c12);  // context clip planes: near, far, 1/(far-near)
  float4    contextPPright  : packoffset(c13);  // context projection plane right
  float4    contextPPup     : packoffset(c14);  // context projection plane up
  float4    contextPPdir    : packoffset(c15);  // context projection plane direction
  float4    timer           : packoffset(c16);  // Time: timer, time difference
  float4    eyePos          : packoffset(c17);  // eye position
  float4    eyeDir          : packoffset(c18);  // eye direction
  float4    depthFog        : packoffset(c19);  // linear depth fog parameter: near, far, 1/(far-near)
  float4    depthFogCol     : packoffset(c20);  // linear depth fog color
  float4    gAmbientCol     : packoffset(c21);  // global ambient color
}

cbuffer g_GlobalConstantBufferObject : register (b1)
{
  float4x4 matMV   : packoffset(c0);   // model view matrix
  float4x4 matMVP  : packoffset(c4);   // model view projection matrix
  float4x4 matMtoW : packoffset(c8);   // model to worldspace matrix
  float4   LMtoSM  : packoffset(c12);  // lightmap to shadowmap: xy:scale, zw:ofs
  float4   MUVtoLM : packoffset(c13);  // model UV to lightmap
}

// User constants
cbuffer g_GlobalConstantBufferUser : register (b2)
{
  float4   coronaPosition : packoffset(c0);
  float4   coronaColor    : packoffset(c1);
  float4   coronaRotation : packoffset(c2);
  float4   coronaScale    : packoffset(c3);
}

#else
  float4x4 matMV             : register(c0);
  float4x4 matP              : register(c4);
  float4x4 matMVP            : register(c8);
  float4x4 matEye            : register(c12);
  float4x4 matInvEye         : register(c16);
  float4x4 matM2WS         	 : register(c20); // model to world space matrix
  float4   contextCP         : register(c24);
  float4   contextPPdir      : register(c27);
  float4   timer             : register(c30);
  float4   eyePos            : register(c31);
  float4   gAmbientCol       : register(c61);  // global ambient color
  float4   depthFog          : register(c62);  // linear depth fog parameter: near, far, 1/(far-near)
  float4   depthFogCol       : register(c63);  // linear depth fog color
  
  // User constants
  float4   coronaPosition  : register(c64);
  float4   coronaColor     : register(c65);
  float4   coronaRotation  : register(c66);
  float4   coronaScale     : register(c67);
#endif

struct VS_IN
{
  float3   ObjPos  : POSITION;
};

struct VS_OUT
{
  float4 ProjPos : SV_Position;   
  float4 Color   : COLOR;
  float2 UV      : TEXCOORD0;        
};

VS_OUT vs_main( VS_IN In )
{
  VS_OUT Out;
  //float2x2 is not supported by shader model 2.0, do rotation manually
  float2 vRotated = float2(coronaRotation.x * In.ObjPos.y + coronaRotation.y * In.ObjPos.z, coronaRotation.z * In.ObjPos.y + coronaRotation.w * In.ObjPos.z);
  float IsViewScale = coronaPosition.w;
  
  float4 vViewPos = mul(matEye, float4(coronaPosition.xyz, 1.0) );
  // Add view space scaling
  vViewPos.xy += coronaScale.zw * vRotated.xy * IsViewScale;
  
  float4 vScreenPos = mul( matP, vViewPos );
  vScreenPos /= vScreenPos.w;
  // Add screenspace scaling
  float2 vScreenScale = coronaScale.xy * vRotated.xy;
  vScreenPos.xy += vScreenScale * (1.0 - IsViewScale);
  
  float4 vCenter = mul(matEye, float4(coronaPosition.xyz, 1.0) );
  vCenter = mul( matP, vCenter );
  float fCenterEyeDist = vCenter.z;
  vCenter /= vCenter.w;
  float2 vDist = vScreenPos.xy - vCenter.xy;
  
  float2 vScale = vDist / vScreenScale;
  vScreenPos.xy += (-vScreenPos.xy + vCenter.xy + (vScreenScale) * vScale) * IsViewScale;
 
  // Depth test is off for corona rendering, but they might still get clipped, so we set the depth to zero.
  vScreenPos.z = 0.0f;
  Out.ProjPos = vScreenPos;
  
  // Fog is done on the CPU now, only left in here commented out for reference.
  //float fFogCoord = GetFogCoord(depthFog, fCenterEyeDist);
  Out.Color = coronaColor;
  //Out.Color.xyz = GetFogColor(Out.Color.xyz, depthFogCol.xyz, fFogCoord);  
  
  Out.UV = In.ObjPos.yz * 0.5 + 0.5;
  return Out;
}
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_2_0;
  vs_mintargetDX11 = vs_4_0_level_9_1;
  svs_mintarget = vs_2_0;
  svs_mintargetDX11 = vs_4_0_level_9_1;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
//
#include <Shaders/VisionCommon.inc>

#ifdef _VISION_DX11
  Texture2D <float4> BaseTexture        : register(t0);
  sampler            BaseTextureSampler : register(s0);
#else
  sampler2D          BaseTexture        : register(s0);
#endif

struct PS_IN                         
{                                    
  float4 ProjPos : SV_Position;   
  float4 Color   : COLOR;
  float2 UV      : TEXCOORD0;           
};                                   

float4 ps_main( PS_IN In ) : SV_Target
{
  float4 vColor = In.Color * vTex2D(BaseTexture, BaseTextureSampler, In.UV);
  return vColor;
}
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_2_0;
  ps_mintargetDX11 = ps_4_0_level_9_1;

  //------ compute shader source ------
  cs_mintarget = cs_5_0;

  //------ platform specific bytecode ------
}

//////////////////////////////////////////////////////////////////////////////

EFFECT Billboards {
  DESCRIPTION = {};
  PARAMCOMMENT={"ClipDistances","x=near clip, y=far clip","0,999999999999",float2,none,""};
  TECHNIQUE "default"
  {
    inclusionTags="LIGHTGRID;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes="Billboards";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "default_AT"
  {
    inclusionTags="ALPHATEST;LIGHTGRID;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes="Billboards_AT";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "Pointlight"
  {
    inclusionTags="POINTLIGHT;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes=;
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "Spotlight"
  {
    inclusionTags="SPOTLIGHT;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes=;
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "ProjPointLight"
  {
    inclusionTags="PROJPOINTLIGHT;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes=;
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "MirrorLightgrid"
  {
    inclusionTags="LIGHTGRID;MIRROR;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes="Billboards_AT";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
}

EFFECT Billboards_NoZ {
  DESCRIPTION = {};
  PARAMCOMMENT={"ClipDistances","x=near clip, y=far clip","0,999999999999",float2,none,""};
  TECHNIQUE "default"
  {
    inclusionTags="LIGHTGRID;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes="Billboards_NoZ";
    passtype = TransparentPass;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "default_AT"
  {
    inclusionTags="ALPHATEST;LIGHTGRID;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes="Billboards_NoZ";
    passtype = TransparentPass;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "Pointlight"
  {
    inclusionTags="POINTLIGHT;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes=;
    passtype = TransparentPass;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "Spotlight"
  {
    inclusionTags="SPOTLIGHT;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes=;
    passtype = TransparentPass;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "ProjPointLight"
  {
    inclusionTags="PROJPOINTLIGHT;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes=;
    passtype = TransparentPass;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "MirrorLightgrid"
  {
    inclusionTags="LIGHTGRID;MIRROR;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes="Billboards_NoZ";
    passtype = TransparentPass;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
}

EFFECT Billboard_Crosses {
  DESCRIPTION = {};
  PARAMCOMMENT={"ClipDistances","x=near clip, y=far clip","0,999999999999",float2,none,""};
  TECHNIQUE "default"
  {
    inclusionTags="LIGHTGRID;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes="Billboards_Crosses";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "default_AT"
  {
    inclusionTags="ALPHATEST;LIGHTGRID;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes="Billboards_Crosses_AT";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "Pointlight"
  {
    inclusionTags="POINTLIGHT;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes=;
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "Spotlight"
  {
    inclusionTags="SPOTLIGHT;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes=;
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "ProjPointLight"
  {
    inclusionTags="PROJPOINTLIGHT;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes=;
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
  TECHNIQUE "MirrorLightgrid"
  {
    inclusionTags="LIGHTGRID;MIRROR;VMATERIAL_NORMALMAP;VMATERIAL_PARALLAX;VMATERIAL_REFMAP;VMATERIAL_SPECULAR";
    passes="Billboards_Crosses_AT";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
}

EFFECT Corona {
  DESCRIPTION = {};
  TECHNIQUE "Corona"
  {
    passes="Corona";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
}

