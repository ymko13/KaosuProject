FILEVERSION = 2.4.0.0;
PLATFORM = DX9;

//////////////////////////////////////////////////////////////////////////////
SOURCECODE=$SOURCECODETAG{
// [This is mandatory comment line; Place your comment here.]
  }$SOURCECODETAG

//////////////////////////////////////////////////////////////////////////////

RENDER_STATE RSC_0 {
  trackingmask = 0;

  //------ Blend State Group ------
  blendenable = 255;
  alphatestref = 64;
  dstblendAlpha = zero;

  //------ Depth Stencil Group ------
  depthtestenabled = false;
  depthwriteenabled = false;

  //------ Rasterizer State Group ------
  rst_flags = 0;
  cullmode = none;

  //------ Tesselation State Group ------
}

SHADER DrawLight {
  RenderStateContainerID = 0;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 17;
  RecompilationRequiredOnPlatforms = -744;
  supportedplatforms = 743;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 0;
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
#include <Shaders/VisionCommon.inc>

#ifdef _VISION_DX11

  cbuffer g_GlobalConstantBufferFrame : register (b0)
  {
    float3 CameraWS : packoffset(c17);
  }

#else

  float3 CameraWS : register(c31);

#endif

struct VS_IN                   
{                              
  float3 ScreenPos : POSITION;
  float3 FarCornerWS : TEXCOORD0;
};                                           

struct VS_OUT                                 
{                                             
  float4 ProjPos  : POSITION;              
  float3 ViewDirectionWS : TEXCOORD0; 
};


VS_OUT vs_main( VS_IN In )                        
{                                              
  VS_OUT Out;                                
  
  Out.ProjPos = float4(In.ScreenPos, 1.0f);
  
  Out.ViewDirectionWS = In.FarCornerWS - CameraWS;
  
  return Out;
}
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_3_0;
  vs_mintargetDX11 = vs_4_0;
  svs_mintarget = vs_3_0;
  svs_mintargetDX11 = vs_4_0;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
#ifdef _VISION_DX11

cbuffer g_GlobalConstantBufferUser : register (b2)
  {
    float4 fLightColor  : packoffset(c0);
    float4 fLightDirection  : packoffset(c1);
    float4 fParams  : packoffset(c2);
  }

#else

  float4 fLightColor  : register(c32);
  float4 fLightDirection  : register(c33);
  float4 fParams  : register(c34);
  
#endif

struct PS_IN                              
{                                             
  float4 ProjPos  : POSITION;              
  float3 ViewDirectionWS : TEXCOORD0; 
};


float4 ps_main( PS_IN In )  : COLOR                     
{                  
  float3 normal = normalize(In.ViewDirectionWS);
  
  float dp = pow(saturate(dot(normal, -fLightDirection.xyz)), fParams.x);

  return dp * fLightColor;
}
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_3_0;
  ps_mintargetDX11 = ps_4_0;

  //------ compute shader source ------
  cs_mintarget = cs_5_0;

  //------ platform specific bytecode ------
}

//////////////////////////////////////////////////////////////////////////////

EFFECT DrawLight {
  DESCRIPTION = {};
  TECHNIQUE "DrawLight"
  {
    passes="DrawLight";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
}

