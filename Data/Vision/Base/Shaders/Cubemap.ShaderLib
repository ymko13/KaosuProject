FILEVERSION = 2.4.0.0;
PLATFORM = DX9;

RENDER_STATE RSC_0 {
  trackingmask = 768;

  //------ Blend State Group ------
  alphatestref = 100;
  alphatestfunc = less_or_equal;

  //------ Depth Stencil Group ------

  //------ Rasterizer State Group ------
  rst_flags = 0;

  //------ Tesselation State Group ------
}

SHADER Cubemap {
  RenderStateContainerID = 0;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 3;
  RecompilationRequiredOnPlatforms = 0;
  supportedplatforms = 615;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 1;
  SAMPLER_PS 0 = {
    samplername = "";
    texturetype = cubemap;
    textureindex = 0;
    texturefile = "";
    filtermode = min_mag_mip_linear;
    textureaddressmode = wrap,wrap,wrap;
    m_fLodBias = 0.000000;
    m_iMaxAnisotropy = 1;
    comparisonfunc = less;
    bordercolor = 0.000000,0.000000,0.000000,1.000000;
    minlod = 0.000000;
    maxlod = 1024.000000;
  }
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
//
#include <Shaders/VisionCommon.inc>

#ifdef _VISION_DX11
cbuffer g_GlobalConstantBufferFrame : register (b0)
{
  float4x4 matInvE : packoffset(c8);   // inverse eye matrix
}
cbuffer g_GlobalConstantBufferObject : register (b1)
{
  float4x4 matMV   : packoffset(c0);   // model view matrix
  float4x4 matMVP  : packoffset(c4);   // model view projection matrix
}
#else
  float4x4 matMV   : register(c0);
  float4x4 matMVP  : register(c8);
  float4x4 matInvE : register(c16);
#endif

struct VS_IN
{
  float3   ObjPos  : POSITION;
  float3   Normal  : NORMAL;
};

struct VS_OUT
{
  float4   ProjPos : SV_Position;
  float3   Normal  : TEXCOORD0;
  float3   EyeDir  : TEXCOORD1;
};

VS_OUT vs_main( VS_IN In )
{
   VS_OUT Out;
   Out.ProjPos = mul( matMVP, float4(In.ObjPos, 1.0f) );
   float3 eye;
   
   // normal to world space
   eye = mul ((float3x3)matMV, In.Normal);
   Out.Normal = mul ((float3x3)matInvE, eye);
   
   // vertex/eye direction to world space
   eye = mul (matMV, float4(In.ObjPos,1)).xyz;
   Out.EyeDir = mul ((float3x3)matInvE, eye);
   
   return Out;
}
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_2_0;
  vs_mintargetDX11 = vs_4_0_level_9_1;
  svs_mintarget = vs_2_0;
  svs_mintargetDX11 = vs_4_0_level_9_1;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
//
#include <Shaders/VisionCommon.inc>

#ifdef _VISION_DX11
  TextureCube <float4> Cubemap        : register(t0);
  sampler              CubemapSampler : register(s0);
#else
  samplerCUBE          Cubemap        : register(s0);
#endif

struct PS_IN
{
  float4 ProjPos : SV_Position;  
  float3 Normal  : TEXCOORD0;
  float3 EyeDir  : TEXCOORD1;
};

float4 ps_main( PS_IN In ) : SV_Target
{
  float3 refl = reflect(In.EyeDir,normalize(In.Normal));
  return vTexCUBE(Cubemap, CubemapSampler, refl);
}
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_2_0;
  ps_mintargetDX11 = ps_4_0_level_9_1;

  //------ compute shader source ------
  cs_mintarget = cs_4_0;

  //------ platform specific bytecode ------
}

//////////////////////////////////////////////////////////////////////////////

EFFECT Cubemap {
  DESCRIPTION = {};
  PARAMCOMMENT={"Cubemap","Cubemap key","",cubemap,none,""};
  TECHNIQUE "new_technique"
  {
    passes="Cubemap";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
}

