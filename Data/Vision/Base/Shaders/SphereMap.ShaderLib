FILEVERSION = 2.4.0.0;
PLATFORM = DX9;

RENDER_STATE RSC_0 {
  trackingmask = 768;

  //------ Blend State Group ------
  alphatestref = 100;
  alphatestfunc = less_or_equal;

  //------ Depth Stencil Group ------

  //------ Rasterizer State Group ------

  //------ Tesselation State Group ------
}

RENDER_STATE RSC_1 {
  trackingmask = 512;

  //------ Blend State Group ------
  alphatestref = 100;
  alphatestfunc = less_or_equal;

  //------ Depth Stencil Group ------

  //------ Rasterizer State Group ------

  //------ Tesselation State Group ------
}

SHADER SphereMapEye_DX {
  RenderStateContainerID = 0;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 19;
  RecompilationRequiredOnPlatforms = 0;
  supportedplatforms = 1;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 0;
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
//
float4x4 matMV : register(c0);
float4x4 matWVP : register(c8);

struct VS_IN
{
   float3 ObjPos : POSITION;
   float2 UV0 : TEXCOORD0;
   float3 Normal : NORMAL;
};

struct VS_OUT
{
   float4 ProjPos : POSITION;
   float2 UV0 : TEXCOORD0;
};

VS_OUT vs_main( VS_IN In )
{ 
   VS_OUT Out;
   float4 eyeNormal = mul( matMV, float4(In.Normal,0.0) );
   Out.UV0 = eyeNormal.xy * float2(0.5,0.5) + float2(0.5,0.5);
   Out.ProjPos = mul( matWVP, float4(In.ObjPos,1.0) );
   return Out;
}
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_2_0;
  vs_mintargetDX11 = vs_4_0;
  svs_mintarget = vs_2_0;
  svs_mintargetDX11 = vs_4_0;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
//
sampler2D BaseTexture : register(s0);

struct PS_IN
{
   float4 ProjPos : POSITION;
   float2 UV0 : TEXCOORD0;
};

float4 ps_main( PS_IN In ) : COLOR
{
   float4 diff = tex2D(BaseTexture, In.UV0);
   return diff;
}
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_2_0;
  ps_mintargetDX11 = ps_4_0;

  //------ compute shader source ------
  cs_mintarget = cs_4_0;

  //------ platform specific bytecode ------
}

SHADER SphereMapObj_DX {
  RenderStateContainerID = 1;
  IsAutoGenerated = false;
  UsesPermutationVariables = false;
  streammask = 19;
  RecompilationRequiredOnPlatforms = 0;
  supportedplatforms = 1;
  compileflags = 0;
  hs_controlpoints = 3;

  //------ Texture samplers ------
  numsamplers_vs = 0;
  numsamplers_hs = 0;
  numsamplers_ds = 0;
  numsamplers_gs = 0;
  numsamplers_ps = 0;
  numsamplers_cs = 0;

  //------ vertex shader source ------

  vs_sourcecode=$SOURCECODETAG{
//
float4x4 matWVP : register(c8);

struct VS_IN
{
   float3 ObjPos : POSITION;
   float2 UV0 : TEXCOORD0;
   float3 Normal : NORMAL;
};

struct VS_OUT
{
   float4 ProjPos : POSITION;
   float2 UV0 : TEXCOORD0;
};

VS_OUT vs_main( VS_IN In )
{ 
   VS_OUT Out;
   Out.UV0 = In.Normal.xy * float2(0.5,0.5) + float2(0.5,0.5);
   Out.ProjPos = mul( matWVP, float4(In.ObjPos,1.0) );
   return Out;
}
  }$SOURCECODETAG

  vs_function = "vs_main";
  vs_mintarget = vs_2_0;
  vs_mintargetDX11 = vs_4_0;
  svs_mintarget = vs_2_0;
  svs_mintargetDX11 = vs_4_0;

  //------ hull shader source ------
  hs_mintarget = hs_5_0;

  //------ domain shader source ------
  ds_mintarget = ds_5_0;

  //------ geometry shader source ------
  gs_mintarget = gs_4_0;
  gs_mintargetDX11 = gs_4_0;

  //------ pixel shader source ------

  ps_sourcecode=$SOURCECODETAG{
//
sampler2D BaseTexture : register(s0);

struct PS_IN
{
   float4 ProjPos : POSITION;
   float2 UV0 : TEXCOORD0;
};

float4 ps_main( PS_IN In ) : COLOR
{
   float4 diff = tex2D(BaseTexture, In.UV0);
   return diff;
}
  }$SOURCECODETAG

  ps_function = "ps_main";
  ps_mintarget = ps_2_0;
  ps_mintargetDX11 = ps_4_0;

  //------ compute shader source ------
  cs_mintarget = cs_4_0;

  //------ platform specific bytecode ------
}

//////////////////////////////////////////////////////////////////////////////

EFFECT SphereMapEye_FX {
  DESCRIPTION = {};
  TECHNIQUE "DXTechEye"
  {
    passes="SphereMapEye_DX";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
}

EFFECT SphereMapObj_FX {
  DESCRIPTION = {};
  TECHNIQUE "DXTechObj"
  {
    passes="SphereMapObj_DX";
    passtype = Auto;
    IsPermutationTechnique=false;
    IsAutoGenerated=false;
  }
}

